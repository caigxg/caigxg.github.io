<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2021/10/26/linux/vim/"/>
    <url>/2021/10/26/linux/vim/</url>
    
    <content type="html"><![CDATA[<h1 id="查看是否能使用系统剪切板"><a href="#查看是否能使用系统剪切板" class="headerlink" title="查看是否能使用系统剪切板"></a>查看是否能使用系统剪切板</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方式1</span><br>vim --version | grep clipboard # +clipboard为支持<br><span class="hljs-meta">#</span><span class="bash"> 方式2</span><br>vim<br>:echo has(&quot;clipboard&quot;)  # 1为支持<br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.vimrc<br>&quot;默认使用系统剪切板&quot;<br>set clipboard=unnamedplus <br>&quot;显示行号&quot;<br>set nu <br>&quot;语法高亮&quot;<br>syntax on <br>&quot;使用utf-8编码&quot;<br>set encoding=utf-8 <br>&quot;显示光标所在行的行号，其它行都为相对改行的行号&quot;<br>set relativenumber <br>&quot;光标所在的当前行高亮&quot;<br>set cursorline <br>&quot;自动拆行,关闭用set nowtap &quot;<br>set wrap <br>&quot;在状态栏显示光标的当前位置（位于哪一行哪一列）&quot;<br>set ruler <br>&quot;光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号&quot;<br>set showmatch <br>&quot;搜索时，高亮显示匹配结果&quot;<br>set hlsearch <br>&quot;输入搜索模式时，每输入一个字符，就自动跳到第一个匹配的结果&quot;<br>set incsearch <br>&quot;搜索时忽略大小写&quot;<br>set ignorecase smartcase <br></code></pre></td></tr></table></figure><h1 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs txt">左移： ←或h<br>下移：↓或j<br>上移：↑或k<br>右移：→或l<br>到下个单词首字母：w<br>到下个字符串首字母：W(大写)<br>到下个单词词尾：e<br>到上个单词首字母：b<br>向下翻页：[Ctrl]+f  或 [page down]<br>向上翻页：[Ctrl]+b  或 [page up]<br>到非空格的下一列：+<br>到非空格的上一列：-<br>向右移动n个字符： n+[space]<br>到行首：0  或 [home]<br>到行尾：$  或 [end]<br>到屏幕最上方一行的首字符：H<br>到屏幕中央的首字符：M<br>到屏幕最下方的首字符：L<br>到文档第一行：gg  或 1G<br>到文档最后一行：G<br>到文档第n行：nG<br>向下移动n行：n+[enter]<br></code></pre></td></tr></table></figure><h1 id="一般模式切换到编辑模式"><a href="#一般模式切换到编辑模式" class="headerlink" title="一般模式切换到编辑模式"></a>一般模式切换到编辑模式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">从光标处开始输入：i<br>从光标所在行的第一个非空字符处开始输入：I<br>从光标的下一个字符处开始输入：a<br>从光标所在行的最后一个字符开始输入：A<br>从光标的下一行开始输入：o<br>从光标的上一行开始输入：O(大写)<br>输入新的字符替换当前字符：r<br>持续向右替换光标处的字符，按[esc]停止：R<br>删除当前字符并进入编辑：    s<br>删除当前单词并进入编辑：    cw<br>删除到指定字符并进入编辑：  ct字符<br>删除整行并进入编辑：    S(大写) 或C<br></code></pre></td></tr></table></figure><h1 id="一般模式下"><a href="#一般模式下" class="headerlink" title="一般模式下"></a>一般模式下</h1><h2 id="查找-amp-替换"><a href="#查找-amp-替换" class="headerlink" title="查找&amp;替换"></a>查找&amp;替换</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">查找字符：f+字符<br>    继续当前查找字符：;(英文分号)<br>向下查找字符串：/+字符串<br>向上查找字符转：?+字符转<br>重复上一个查找动作：n<br>反向重复上一个查找动作：N<br>在n1和n2之间(直接)把w1替换为w2：:n1,n2s<span class="hljs-regexp">/w1/</span>w2/g<br>在n1和n2之间(需用户确认)把w1替换为w2：:n1,n2s<span class="hljs-regexp">/w1/</span>w2/gc<br>全文替换： :% s<span class="hljs-regexp">/w1/</span>w2/g<br>精确字符替换：  :% s<span class="hljs-regexp">/\&lt;字符\&gt;/</span>替换的字符/g<br>只显示需要替换的次数而不替换： :% s<span class="hljs-regexp">/w1/</span>w2/n  <br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">删除和复制都是将操作的字符放到寄存器中，默认为无名寄存器，可以指定寄存器（a-z） &quot;寄存器名  如 &quot;ayy 将内容保存到a寄存器中<br>系统剪切板：  可以在所有地方使用复制粘贴，而不限于文件中<br>向前删除一个字符：X  或 [backspace]<br>向后删除一个字符：x  或 [del]<br>删除光标所在行：dd<br>向下删除n行：ndd<br>删除当前光标位置到第一行：d1G<br>删除当前光标位置到最后一行：dG<br>删除当前光标到所在行行首：d0<br>删除当前光标到所在行行尾：d$<br>删除1到10行: :1,10d<br>删除括号内内容: di(<br>删除到指定字符: dt?<br></code></pre></td></tr></table></figure><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl">复制一个字符： <span class="hljs-variable">yiw</span><br>复制当前行：<span class="hljs-variable">yy</span><br>向下复制<span class="hljs-variable">n</span>行：<span class="hljs-variable">nyy</span><br>在当前光标的下一行粘贴：<span class="hljs-function"><span class="hljs-title">p</span>(小写)</span><br>在当前光标的上一行粘贴：<span class="hljs-function"><span class="hljs-title">P</span>(大写)</span><br>复制到系统剪切板： <span class="hljs-string">&quot;+yy</span><br><span class="hljs-string">使用系统剪切板: &quot;</span>+<span class="hljs-variable">p</span><br></code></pre></td></tr></table></figure><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less">宏操作： 批量处理<br>录制宏： <span class="hljs-selector-tag">q</span>寄存器名 (显示recoding开始录制操作)<br>使用宏： @寄存器名 (对操作对象使用录制的操作)<br>批量处理： <span class="hljs-selector-tag">V</span>选择处理的对象, : 后输入 <span class="hljs-selector-tag">normal</span> @寄存器 ，对所有选到的对象进行录制的操作<br></code></pre></td></tr></table></figure><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">保存：  :w<br>离开：  :q<br>强制操作：  !<br>保存修改后离开： ZZ<br>文件另存为：    :w 文件名<br>将另一个文件的内容加载进来：    :r 文件名<br>把n1到n2间的内容存为文档：  :n1,n2 w 文件名<br>暂时离开vi，执行其它指令： :! 指令<br>重新加载并不保存当前文件： :e!<br><br>当前光标所在行与下一行合并：J<br>复原前一个动作：u<br>重复前一个动作：. (英文点)<br></code></pre></td></tr></table></figure><h2 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">打开一个文件后，在一般模式下 :ls 可以查看打开的文件<br>:b 序号 打开对应序号的文件<br><br>分割窗口    编辑同一文件时，所有分割区都会生效<br>水平分割：  [Ctrl]+w后s  或者   :sp<br>垂直分割：  [Ctrl]+w后v  或者   :vs<br>切换窗口：  [Ctrl]+w后w  循环切换 (h:左  j:下 k:上 l:右)<br>移动窗口：  [Ctrl]+w后(大写的H J K L)<br>在当前文件下分割打开另一个文件：    :vs 文件名  或 :sp 文件名<br>打开新的标签编辑页：    :tabnew 文件名<br>切换标签页：    gt<br>到下一个标签： :tabn<br>到上一个标签： :tabp<br></code></pre></td></tr></table></figure><h2 id="块选择"><a href="#块选择" class="headerlink" title="块选择"></a>块选择</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">区块选择：<br>字符选择：v    将光标经过的地方选中<br>行选择：V   将光标经过的行选中<br>以长方形方式选中：[Ctrl]+v<br>可以对选中的区域进行复制：y(或删除：d)<br><br>多文档编辑：<br>同时打开多个文档： vi file1 file2 file3<br>编辑下一个文档：    :n<br>列出所有开启的文档：    :files<br></code></pre></td></tr></table></figure><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">打标记 m(a-zA-Z) <br>  小写是在单一文件可跳转到标记，大写可在不同文件间跳转<br>跳转到标记 <br>&#x27;a 跳转到打标记时的光标位置<br>`a 跳转到打标记时光标所在行首<br></code></pre></td></tr></table></figure><h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">向左删除一位：  [Ctrl]+h<br>向左删除一个word：  [Ctrl]+w<br>删除整行: [Ctrl]+u<br>退出编辑模式：  [Ctrl]+c<br><br>补全类型：<br>补全单词： [Ctrl]+n 或 [Ctrl]+p  (匹配文件中的单词，多个候选时，[Ctrl]+n跳到下一个候选词，[Ctrl]+p到上一个候选词)<br>补全文件名：[Ctrl]+x 或 [Ctrl]+f<br></code></pre></td></tr></table></figure><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 前提环境python python3 ruby</span><br><span class="hljs-meta">#</span><span class="bash"> 从github上获取文件，放到~/.vim/<span class="hljs-built_in">autoload</span>/</span><br><span class="hljs-meta">#</span><span class="bash">方法1:</span> <br>curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<br><span class="hljs-meta">#</span><span class="bash"> 方法2: (其他文件可删除,只需要plug.vim文件)</span><br>git clone https://github.com/junegunn/vim-plug.git .vim/autoload<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改配置文件</span><br>vim ~/.vimrc<br><span class="hljs-meta">#</span><span class="bash"> 以下内容放到文件开始的地方</span><br>if empty(glob(&#x27;~/.vim/autoload/plug.vim&#x27;))<br>  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs<br>    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<br>  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC<br>endif<br><br>&quot;安装需要的插件&quot;<br>call plug#begin(&#x27;~/.vim/plugged&#x27;)<br>Plug &#x27;justinmk/vim-sneak&#x27;<br>Plug &#x27;jiangmiao/auto-pairs&#x27; &quot;自动补全，删除对应括号&quot;<br>Plug &#x27;preservim/nerdtree&#x27; &quot;文件目录树&quot;<br>Plug &#x27;Yggdroot/LeaderF&#x27;, &#123; &#x27;do&#x27;: &#x27;./install.sh&#x27; &#125; &quot; 模糊查找文件&quot;<br>Plug &#x27;mhinz/vim-startify&#x27; &quot; 进入vim时，显示最近打开的文件&quot;<br>Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#123; -&gt; mkdp#util#install_sync() &#125;, &#x27;for&#x27; :[&#x27;markdown&#x27;, &#x27;vim-plug&#x27;] &#125; &quot; markdown预览&quot;<br>Plug &#x27;dhruvasagar/vim-table-mode&#x27;, &#123; &#x27;on&#x27;: &#x27;TableModeToggle&#x27; &#125;<br>Plug &#x27;vimwiki/vimwiki&#x27;<br>call plug#end()<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重新加载 <span class="hljs-built_in">source</span> ~/.vimrc</span><br><span class="hljs-meta">#</span><span class="bash"> 进行安装</span><br><span class="hljs-meta">#</span><span class="bash"> 方法1</span> <br>vim -es -u vimrc -i NONE -c &quot;PlugInstall&quot; -c &quot;qa&quot;<br><span class="hljs-meta">#</span><span class="bash"> 方法2 打开vim 输入</span> <br>:PlugInstall <br><span class="hljs-meta">#</span><span class="bash"> 更新插件</span> <br>:PlugUpdate<br><span class="hljs-meta">#</span><span class="bash"> 清除不在配置文件的插件</span> <br>:PlugClean<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell</title>
    <link href="/2021/10/19/linux/shell/"/>
    <url>/2021/10/19/linux/shell/</url>
    
    <content type="html"><![CDATA[<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><p>《Linux Shell脚本攻略（第3版）》</p><h1 id="脚本执行方法"><a href="#脚本执行方法" class="headerlink" title="脚本执行方法"></a>脚本执行方法</h1><h2 id="1-使用bash执行"><a href="#1-使用bash执行" class="headerlink" title="1.使用bash执行"></a>1.使用bash执行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash hello.sh<br></code></pre></td></tr></table></figure><h2 id="2-使用source执行"><a href="#2-使用source执行" class="headerlink" title="2.使用source执行"></a>2.使用source执行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash hello.sh<br></code></pre></td></tr></table></figure><h2 id="3-赋予执行权限"><a href="#3-赋予执行权限" class="headerlink" title="3.赋予执行权限"></a>3.赋予执行权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x hello.sh<br>./hello.sh<br></code></pre></td></tr></table></figure><h1 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 为注释符号</span><br><span class="hljs-meta">#</span><span class="bash">! 特殊的注释，告诉系统同一行上紧跟在它后面的那个参数是用来执行本文件的程序</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash 一般作为文件的首行</span><br></code></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 变量值区分大小写</span><br>var=hello # =的左右不能有空格<br>var=&quot;hello world&quot; # 值有空格时，必须要&quot;(双引号)或&#x27;(单引号)<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-string">&quot;可以解析引号内的变量</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> &#x27;引号内保持原本的内容</span></span><br>echo $var # 使用$获取变量的值；标准格式 <br>echo $&#123;var&#125; # 使用$获取变量的值；简略格式 &#123;&#125;可以帮助解释器识别变量的边界  如：$&#123;var&#125;iable与$variable 会解释为不同结果<br></code></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="系统默认的环境变量"><a href="#系统默认的环境变量" class="headerlink" title="系统默认的环境变量"></a>系统默认的环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">HOME <span class="hljs-comment"># 当前用户的家目录</span></span><br><span class="hljs-meta">$</span><span class="bash">PATH <span class="hljs-comment"># 用来搜索命令的目录(以:分割多个路径)</span></span><br><span class="hljs-meta">$</span><span class="bash">PS1 <span class="hljs-comment"># 命令提示符 用户名,机器名，当前目录名：[caigx@Arch ~]$</span></span><br><span class="hljs-meta">$</span><span class="bash">PS2 <span class="hljs-comment"># 二级提示符，提示后续输入，通常为 &gt;</span></span><br><span class="hljs-meta">$</span><span class="bash">IFS <span class="hljs-comment"># 输入分隔符，通常为空格，指标符，换行符</span></span><br><span class="hljs-meta">$</span><span class="bash">0 <span class="hljs-comment"># shell脚本的名字</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-comment"># # 传递给脚本的参数个数</span></span><br><span class="hljs-meta">$</span><span class="bash">$ <span class="hljs-comment"># shell脚本的进程号</span></span><br><span class="hljs-meta">$</span><span class="bash">? <span class="hljs-comment"># 上个命令的退出状态，或函数的返回值</span></span><br></code></pre></td></tr></table></figure><h3 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">1 <span class="hljs-variable">$2</span> .. <span class="hljs-comment"># 脚本程序的参数</span></span><br><span class="hljs-meta">$</span><span class="bash">* <span class="hljs-comment"># 在一个变量中列出所有的参数，各个参数间用环境变量IFS中的第一个字符分隔(随$IFS变化而变化)</span></span><br><span class="hljs-meta">$</span><span class="bash">@ <span class="hljs-comment"># 是$*的一种变体，不使用$IFS，也会将参数间分隔</span></span><br>var=`command` 或 var=$(command) # 可以将命令运行的结果赋值给变量<br>readonly var=11 # readonly可以将变量定义为只读变量，只读变量的值不能被改变<br>local var=11# local可以将变量定义为局部变量,只能在函数中使用<br>set var=good # 使用set给变量赋值<br>unset var # 使用 unset 命令可以删除变量,变量被删除后不能再次使用；unset 命令不能删除只读变量<br>export var=global # export可以将变量变为环境变量，作用范围为当前shell进程及其子进程有效，父进程关闭时，环境变量会失效<br><span class="hljs-meta">#</span><span class="bash"> 脚本中定义的变量默认为全局变量，作用范围为在当前脚本进程中有效，而不是当前脚本文件</span><br></code></pre></td></tr></table></figure><p>示例</p><p><img src="../../../.config/Typora/typora-user-images/image-20211014214301136.png" alt="image-20211014214301136"></p><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 例：</span><br>var=http://www.a.com/123.html<br><span class="hljs-meta">#</span><span class="bash">  删除左边，保留右边</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var<span class="hljs-comment">#*//&#125;    # 结果：www.a.com/123.html           *//表示从左边开始，删除到第一个//，包括//</span></span><br><span class="hljs-meta">#</span><span class="bash">  删除左边，保留右边</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var<span class="hljs-comment">##*/&#125;   # 结果：123.html 从左边开始，删除到最后一个/，包括/</span></span><br><span class="hljs-meta">#</span><span class="bash">  删除右边，保留左边</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var%/*&#125;    <span class="hljs-comment"># 结果：http://www.a.com  从右边开始，删除到第一个/，包括/</span></span><br><span class="hljs-meta">#</span><span class="bash"> 删除右边，保留左边</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var%%/*&#125;  <span class="hljs-comment"># 结果：http:从右边开始，删除到最后一个/，包括/</span></span><br><span class="hljs-meta">#</span><span class="bash"> 从左边第n个字符开始，截取m个字符</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var:0:5&#125;  <span class="hljs-comment"># 结果：http:</span></span><br><span class="hljs-meta">#</span><span class="bash"> 从左边第n个字符开始，截取一直到结束</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var:7&#125;    <span class="hljs-comment"># 结果：www.a.com/123.html</span></span><br><span class="hljs-meta">#</span><span class="bash"> 从右边第n个字符开始，截取m个字符</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var:0-7:3&#125;  <span class="hljs-comment"># 结果：123</span></span><br><span class="hljs-meta">#</span><span class="bash"> 从右边第n个字符开始，截取一直到结束</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var:0-7&#125;  <span class="hljs-comment"># 结果：123.html</span></span><br><span class="hljs-meta">#</span><span class="bash"> 给变量设置默认值</span><br><span class="hljs-meta">$</span><span class="bash">&#123;var:-good&#125; <span class="hljs-comment"># var为空时，就把它设为good</span></span><br></code></pre></td></tr></table></figure><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a><strong>获取字符串长度</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 例如：</span><br>var=&quot;1234&quot;<br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-comment">#var&#125;    # 结果：4</span></span><br>expr length $&#123;var&#125;   # 结果：4<br>expr $var : &quot;.*&quot;   # 结果：4    :与$var和&quot;.*&quot;间有空格<br>echo $var |wc -L   # 结果：4       wc -L 单行字符串，表示当前行字符串长度；多行字符串，表示最长行的长度。<br>echo -n $var |wc -c  # 结果：4     -n表示去除“\n”换行符 ; wc  -c  表示统计字符的个数<br>echo  $var |wc -c   # 结果：5     区别在于-n参数<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="普通数组"><a href="#普通数组" class="headerlink" title="普通数组"></a>普通数组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 定义</span><br><span class="hljs-meta">#</span><span class="bash"> 方式1</span><br>array_var=(val1 val2 val3)<br><span class="hljs-meta">#</span><span class="bash"> 方式2</span><br>array_var[0]=val1<br>array_var[1]=val2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以列表形式打印数组中所有的值</span><br>echo $&#123;array_var[*]&#125; # 方式1<br>echo $&#123;array_var[@]&#125; # 方式2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 数组的长度</span><br>echo $&#123;#array_var[*]&#125;<br></code></pre></td></tr></table></figure><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将变量定义为关联数组</span><br>declare -A ass_array<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 向关联数组添加元素</span><br><span class="hljs-meta">#</span><span class="bash"> 方式1</span><br>ass_array=([index1]=val1 [index2]=2)<br><span class="hljs-meta">#</span><span class="bash"> 方式2</span> <br>ass_array[index1]=val1<br>ass_array[index2]=val2<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 显示数组内容</span><br>echo $&#123;ass_array[index1]&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 列出索引列表</span><br>echo $&#123;!ass_array[*]&#125; # 方式1<br>echo $&#123;!ass_array[@]&#125; # 方式2<br></code></pre></td></tr></table></figure><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">no1=1<br>no2=2<br>let result=no1+no2 # 使用let时，变量名之前不需要再添加$<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 自加</span><br>let no1++<br><span class="hljs-meta">#</span><span class="bash"> 简写</span><br>let no1+=6<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="[]"></a>[]</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">no1=1<br>no2=2<br>result=$[no1+no2]<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="(())"></a>(())</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">no1=1<br>no2=2<br>result=$((no1+no2))<br><span class="hljs-meta">#</span><span class="bash"> 注意，使用变量时不用加$前缀,(())会自动解析变量名 如：c=$((a+b))  类似 c=((a+b)) 这样的写法是错误的，不加$就不能取得表达式的结果</span><br></code></pre></td></tr></table></figure><h3 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">result=`expr 1+2`<br>result=$(expr 1+2)<br>result=$(expr $no1+2)<br></code></pre></td></tr></table></figure><h3 id="bc-支持浮点数"><a href="#bc-支持浮点数" class="headerlink" title="bc(支持浮点数)"></a>bc(支持浮点数)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;4 * 0.25&quot;|bc<br></code></pre></td></tr></table></figure><h1 id="判断条件"><a href="#判断条件" class="headerlink" title="判断条件"></a>判断条件</h1><h2 id="test判断"><a href="#test判断" class="headerlink" title="test判断"></a>test判断</h2><h3 id="if的写法"><a href="#if的写法" class="headerlink" title="if的写法"></a>if的写法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方式1</span><br>if test -f /etc/passwd <br>then<br>  dosomething # 缩进只是为了容易阅读，没有别的作用<br>fi<br><span class="hljs-meta">#</span><span class="bash"> 方式2 使用<span class="hljs-keyword">else</span></span><br>if test -f /etc/passwd; then # if和then在同一行时，必须用;分隔<br>  dosomething<br>else<br>  dosomething<br>fi<br><span class="hljs-meta">#</span><span class="bash"> 方式3 使用<span class="hljs-keyword">elif</span></span><br>if test -f /etc/passwd <br>then<br>  dosomething # 缩进只是为了容易阅读，没有别的作用<br>elif<br>  dosomething<br>else<br>  dosomething<br>fi<br></code></pre></td></tr></table></figure><h4 id="变量的写法注意"><a href="#变量的写法注意" class="headerlink" title="变量的写法注意"></a>变量的写法注意</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">if test $str1 = &quot;he&quot; # 如果$str1为空时会报错<br>if test &quot;$str1&quot; = &quot;he&quot; # 给变量加上&quot;<br></code></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">str1 = str2 # 两者相同则为真<br>str1 != str2 # 两者不同则为真<br>-n str # 字符串不为空则为真<br>-z str # 字符串为null则为真<br></code></pre></td></tr></table></figure><h3 id="算术比较"><a href="#算术比较" class="headerlink" title="算术比较"></a>算术比较</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">num1 -eq num2 # 相等为真<br>num1 -ne num2 # 不相等为真<br>num1 -gt num2 # num1大于num2为真<br>num1 -ge num2 # num1大于等于num2为真<br>num1 -lt num2 # num1小于num2为真<br>num1 -le num2 # num1小于等于num2为真<br>! expression # 表达式为假则为真，表达式为真则为假<br></code></pre></td></tr></table></figure><h3 id="文件条件"><a href="#文件条件" class="headerlink" title="文件条件"></a>文件条件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">-d file # 为目录则为真<br>-e file # 文件存在则为真(通常使用 -f)<br>-f file # 文件为一个普通文件则为真<br>-g file # 文件的set-group-id位被设置则为真<br>-r file # 文件可读则为真<br>-w file # 文件可写则为真<br>-x file # 文件可执行则为真<br>-s file # 文件大小不为0则为真<br>-u file # 文件的set-user-id位被设置则为真<br></code></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title="[ ]"></a>[ ]</h2><h3 id="效果与test一致，注意以下问题"><a href="#效果与test一致，注意以下问题" class="headerlink" title="效果与test一致，注意以下问题"></a>效果与test一致，注意以下问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ -f /etc/passwd ] # [后与]前都需要有空格 [(空格)条件(空格)]<br></code></pre></td></tr></table></figure><h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方式1</span><br>if test -f /etc/passwd <br>then<br>  dosomething # 缩进只是为了容易阅读，没有别的作用<br>fi<br><span class="hljs-meta">#</span><span class="bash"> 方式2 使用<span class="hljs-keyword">else</span></span><br>if test -f /etc/passwd; then # if和then在同一行时，必须用;分隔<br>  dosomething<br>else<br>  dosomething<br>fi<br><span class="hljs-meta">#</span><span class="bash"> 方式3 使用<span class="hljs-keyword">elif</span></span><br>if test -f /etc/passwd <br>then<br>  dosomething # 缩进只是为了容易阅读，没有别的作用<br>elif<br>  dosomething<br>else<br>  dosomething<br>fi<br></code></pre></td></tr></table></figure><h2 id="case-in"><a href="#case-in" class="headerlink" title="case in"></a>case in</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">case expression in<br>    pattern1)<br>        statement1<br>        ;;<br>    pattern2)<br>        statement2<br>        ;;<br>    *)<br>    statement<br>esac<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">case</span> <span class="hljs-keyword">in</span>支持的正则表达式：</span><br><span class="hljs-meta">#</span><span class="bash"> * 任意字符串</span><br><span class="hljs-meta">#</span><span class="bash"> [abc] 表示 a、b、c 三个字符中的任意一个</span><br><span class="hljs-meta">#</span><span class="bash"> [m-n] 表示从 m 到 n 的任意一个字符</span><br><span class="hljs-meta">#</span><span class="bash"> | 表示多重选择，类似逻辑运算中的或运算</span><br></code></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方式1</span><br>for((exp1; exp2; exp3))# exp1、exp2、exp3 是三个表达式，其中 exp2 是判断条件，for 循环根据 exp2 的结果来决定是否继续下一次循环<br>do<br>    statements<br>done<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方式2</span><br>for variable in value_list<br>do<br>    statements<br>done<br></code></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition# 条件成立执行do<br>do<br>    statements<br>done<br></code></pre></td></tr></table></figure><h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">until condition# 条件不成立执行do<br>do<br>    statements<br>done<br></code></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">select variable in value_list# 按下 Ctrl+D 组合键，结束 select in 循环<br>do<br>    statements<br>done<br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 声明函数</span><br><span class="hljs-meta">#</span><span class="bash"> 方式1</span><br>function name() &#123;<br>    statements<br>    [return value]<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方式2</span><br>name() &#123;# 可以不写 function 关键字<br>    statements<br>    [return value]<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方式3</span><br>function name &#123;# 写了 function 关键字，也可以省略函数名后面的小括号<br>    statements<br>    [return value]<br>&#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 函数要声明后才能使用</span><br><span class="hljs-meta">#</span><span class="bash"> 调用函数只用写函数名：</span><br></code></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><table><thead><tr><th>文件描述符</th><th>文件名</th><th>类型</th><th>硬件</th></tr></thead><tbody><tr><td>0</td><td>stdin</td><td>标准输入文件</td><td>键盘</td></tr><tr><td>1</td><td>stdout</td><td>标准输出文件</td><td>显示器</td></tr><tr><td>2</td><td>stderr</td><td>标准错误输出文件</td><td>显示器</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">输出重定向<br>标准输出重定向  command 1&gt; file (可简写为command &gt; file)<br>标准错误输处重定向 command  2&gt;file<br>正确输出和错误信息同时保存command &gt;file 2&gt;&amp;1  把正确输出和错误信息同时保存到同一个文件（file）中<br>command &gt;file1 2&gt;file2把正确的输出结果输出到 file1 文件中，把错误信息输出到 file2 文件中<br><br>输出重定向的完整写法其实是fd&gt;file或者fd&gt;&gt;file，其中 fd 表示文件描述符，如果不写，默认为 1，也就是标准输出文件<br>当文件描述符为 1 时，一般都省略不写,文件描述符为大于 1 的值时，比如 2，就必须写上,如：command 2&gt;file<br>fd和&gt;之间不能有空格，否则 Shell 会解析失败；&gt;和file之间的空格可有可无，如 command 2&gt; file<br>/dev/null   任何放入该文件的数据都会被丢弃，不能恢复（可以看作垃圾箱）<br><br>输入重定向<br>command &lt;file将 file 文件中的内容作为 command 的输入<br>command &lt;&lt;END从标准输入（键盘）中读取数据，直到遇见分界符 END 才停止（分界符可以是任意的字符串，用户自己定义）<br>command &lt;file1 &gt;file2将 file1 作为 command 的输入，并将 command 的处理结果输出到 file2<br><br>输入重定向的完整写法是fd&lt;file，其中 fd 表示文件描述符，如果不写，默认为 0，也就是标准输入文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux系统安装</title>
    <link href="/2021/10/13/linux/Archlinux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <url>/2021/10/13/linux/Archlinux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><p>根据 <a href="https://archlinuxstudio.github.io/ArchLinuxTutorial/#/rookie/archlinux_pre_install">https://archlinuxstudio.github.io/ArchLinuxTutorial/#/rookie/archlinux_pre_install</a> 成功安装，该文章写的非常详细，建议先浏览一遍有所了解。</p><h2 id="安装前准备U盘刻录"><a href="#安装前准备U盘刻录" class="headerlink" title="安装前准备U盘刻录"></a>安装前准备U盘刻录</h2><h3 id="1-下载镜像文件：清华源下载地址：https-mirrors-tuna-tsinghua-edu-cn-archlinux-iso-latest-，下载-iso文件"><a href="#1-下载镜像文件：清华源下载地址：https-mirrors-tuna-tsinghua-edu-cn-archlinux-iso-latest-，下载-iso文件" class="headerlink" title="1. 下载镜像文件：清华源下载地址：https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/，下载.iso文件"></a>1. 下载镜像文件：清华源下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/%EF%BC%8C%E4%B8%8B%E8%BD%BD.iso%E6%96%87%E4%BB%B6">https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/，下载.iso文件</a></h3><h3 id="2-下载刻录软件：https-rufus-en-softonic-com"><a href="#2-下载刻录软件：https-rufus-en-softonic-com" class="headerlink" title="2. 下载刻录软件：https://rufus.en.softonic.com/"></a>2. 下载刻录软件：<a href="https://rufus.en.softonic.com/">https://rufus.en.softonic.com/</a></h3><h3 id="3-linux刻录"><a href="#3-linux刻录" class="headerlink" title="3. linux刻录"></a>3. linux刻录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync<br></code></pre></td></tr></table></figure><h2 id="进行安装"><a href="#进行安装" class="headerlink" title="进行安装"></a>进行安装</h2><h3 id="1-禁用reflector"><a href="#1-禁用reflector" class="headerlink" title="1.禁用reflector"></a>1.禁用reflector</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop reflector.service<br></code></pre></td></tr></table></figure><h3 id="2-连接无线（建议无线名称不带中文）"><a href="#2-连接无线（建议无线名称不带中文）" class="headerlink" title="2.连接无线（建议无线名称不带中文）"></a>2.连接无线（建议无线名称不带中文）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">rfkill unblock wifi#启用无线<br>iwctl                           #进入交互式命令行<br>device list                     #列出设备名，比如无线网卡看到叫 wlan0<br>station wlan0 scan              #扫描网络<br>station wlan0 get-networks      #列出网络 比如想连接CMCC-5AQ7这个无线<br>station wlan0 connect wifi999   #进行连接 输入密码即可<br>exit                            #成功后exit退出<br>ping www.baidu.com#测试网络 <br></code></pre></td></tr></table></figure><h3 id="3-更新系统时钟"><a href="#3-更新系统时钟" class="headerlink" title="3.更新系统时钟"></a>3.更新系统时钟</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">timedatectl set-ntp true    #将系统时间与网络时间进行同步<br>timedatectl status          #检查服务状态<br></code></pre></td></tr></table></figure><h3 id="4-更换镜像源"><a href="#4-更换镜像源" class="headerlink" title="4.更换镜像源"></a>4.更换镜像源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/pacman.d/mirrorlist #可搜索 tuna 将清华源的两个放到文件中最上面<br></code></pre></td></tr></table></figure><h3 id="5-分区"><a href="#5-分区" class="headerlink" title="5.分区"></a>5.分区</h3><h4 id="5-1转换磁盘类型"><a href="#5-1转换磁盘类型" class="headerlink" title="5.1转换磁盘类型"></a>5.1转换磁盘类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsblk                       #显示分区情况<br>parted /dev/sdx             #执行parted，进行磁盘类型变更<br>(parted)mktable             #输入mktable<br>New disk label type? gpt    #输入gpt 将磁盘类型转换为gpt 如磁盘有数据会警告，输入yes即可<br>quit                        #最后quit退出parted命令行交互<br></code></pre></td></tr></table></figure><h4 id="5-2进行分区"><a href="#5-2进行分区" class="headerlink" title="5.2进行分区"></a>5.2进行分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cfdisk /dev/sdx #来执行分区操作,分配各个分区大小，类型<br>/efi: 1G<br>/: 100G<br>/home: 剩余全部<br>[write]后[quit]<br>fdisk -l #复查磁盘情况<br></code></pre></td></tr></table></figure><h4 id="5-3格式化分区"><a href="#5-3格式化分区" class="headerlink" title="5.3格式化分区"></a>5.3格式化分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">如在5.2中分区结果为下<br>sda0<br>  -sda1 /efi<br>  -sda2 /<br>  -sda3 /home<br>进行格式化<br>mkfs.vfat  /dev/sda1            #格式化efi分区<br>mkfs.ext4  /dev/sda2            #格式化根目录<br>mkfs.ext4  /dev/sda3            #格式化home目录<br></code></pre></td></tr></table></figure><h4 id="5-4挂载分区"><a href="#5-4挂载分区" class="headerlink" title="5.4挂载分区"></a>5.4挂载分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">先挂载根目录</span><br>mount /dev/sda2  /mnt<br><span class="hljs-meta">#</span><span class="bash">创建efi和home的目录</span><br>mkdir /mnt/efi<br>mkdir /mnt/home<br><span class="hljs-meta">#</span><span class="bash">挂载efi和home目录</span><br>mount /dev/sda1 /mnt/efi<br>mount /dev/sda3 /mnt/home<br></code></pre></td></tr></table></figure><h4 id="5-5安装系统"><a href="#5-5安装系统" class="headerlink" title="5.5安装系统"></a>5.5安装系统</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacstrap /mnt base base-devel linux linux-firmware  #base-devel在AUR包的安装是必须的<br>pacstrap /mnt dhcpcd iwd vim sudo bash-completion   #一个有线所需 一个无线所需 一个编辑器  一个提权工具 一个补全工具 iwd也需要dhcpcd<br></code></pre></td></tr></table></figure><h4 id="5-6生产fstab文件"><a href="#5-6生产fstab文件" class="headerlink" title="5.6生产fstab文件"></a>5.6生产fstab文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab <br>cat /mnt/etc/fstab #检查一下：记录关于sda0,sda1,sda2的信息<br></code></pre></td></tr></table></figure><h3 id="切换到新安装好的系统-即装好后我们使用的系统"><a href="#切换到新安装好的系统-即装好后我们使用的系统" class="headerlink" title="切换到新安装好的系统(即装好后我们使用的系统)"></a>切换到新安装好的系统(即装好后我们使用的系统)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">arch-chroot /mnt<br></code></pre></td></tr></table></figure><h4 id="1-设置主机名"><a href="#1-设置主机名" class="headerlink" title="1.设置主机名"></a>1.设置主机名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/hostname #添加自己的主机名,如Arch<br>vim /etc/hosts #在hosts中添加匹配条目<br>127.0.0.1   localhost<br>::1         localhost<br>127.0.1.1   Arch.localdomain Arch<br></code></pre></td></tr></table></figure><h4 id="2-设置时区及硬件时间"><a href="#2-设置时区及硬件时间" class="headerlink" title="2.设置时区及硬件时间"></a>2.设置时区及硬件时间</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>hwclock --systohc#将系统时间同步到硬件时间<br></code></pre></td></tr></table></figure><h4 id="3-设置Local（软件使用的语言、书写习惯和字符集）"><a href="#3-设置Local（软件使用的语言、书写习惯和字符集）" class="headerlink" title="3.设置Local（软件使用的语言、书写习惯和字符集）"></a>3.设置Local（软件使用的语言、书写习惯和字符集）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/locale.gen<br><span class="hljs-meta">#</span><span class="bash">去掉 en_US.UTF-8 以及 zh_CN.UTF-8 的注释</span><br><br>locale-gen #运行命令，生成locale<br>echo &#x27;LANG=en_US.UTF-8&#x27;  &gt; /etc/locale.conf<br></code></pre></td></tr></table></figure><h4 id="4-为root添加密码及添加用户"><a href="#4-为root添加密码及添加用户" class="headerlink" title="4.为root添加密码及添加用户"></a>4.为root添加密码及添加用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd root <br><br>useradd -m -G wheel caigx #添加用户，并将其加入到wheel组<br>vim /etc/sudoers<br><span class="hljs-meta">#</span><span class="bash">去掉关于 %wheel的两个注释：一个是有root权限，一个是使用sudo时不需要密码</span><br></code></pre></td></tr></table></figure><h4 id="5-安装微码"><a href="#5-安装微码" class="headerlink" title="5.安装微码"></a>5.安装微码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">根据自己的电脑安装</span><br>pacman -S intel-ucode   #Intel<br>pacman -S amd-ucode     #AMD<br></code></pre></td></tr></table></figure><h4 id="6-安装grub引导"><a href="#6-安装grub引导" class="headerlink" title="6.安装grub引导"></a>6.安装grub引导</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -S grub efibootmgr   #grub是启动引导器，efibootmgr被 grub 脚本用来将启动项写入 NVRAM。<br>grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB #取名为GRUB 并将grubx64.efi安装到之前的指定位置<br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><p>此时遇到了参考文章中的问题：没有启动条目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在某些主板安装完成后，你会发现没有启动条目。这是因为某些主板的 UEFI 固件在显示 UEFI NVRAM 引导条目之前，需要在特定的位置存放可引导文件，不支持自定义存放 efi 文件(如微星 Z170-A Gaming PRO)。解决方案是在默认启动路径下安装 GRUB。重新插入安装优盘，挂载目录，chroot 到/mnt，然后你可以直接把已经生成好的 efi 文件移动到默认目录下，如下代码所示。只有安装完成后你的主板不出现启动条目才需要尝试如下命令，正常安装无需执行</span><br><br>mkdir -p /efi/EFI/BOOT<br>mv /efi/EFI/GRUB/grubx64.efi /efi/EFI/BOOT/BOOTX64.EFI<br></code></pre></td></tr></table></figure><h4 id="7-安装完成"><a href="#7-安装完成" class="headerlink" title="7.安装完成"></a>7.安装完成</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit                # 退回安装环境#<br>umount -R  /mnt     # 卸载新分区<br>reboot              # 重启，关机启动时记得拔u盘<br></code></pre></td></tr></table></figure><h1 id="配置及安装桌面"><a href="#配置及安装桌面" class="headerlink" title="配置及安装桌面"></a>配置及安装桌面</h1><h2 id="1-交换分区"><a href="#1-交换分区" class="headerlink" title="1.交换分区"></a>1.交换分区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">dd if=/dev/zero of=/swapfile bs=1M count=16384 status=progress #创建16G的交换空间 大小根据需要自定<br>chmod 600 /swapfile #设置正确的权限<br>mkswap /swapfile #格式化swap文件<br>swapon /swapfile #启用swap文件<br><br>vim /etc/fstab<br>/swapfile none swap defaults 0 0 #添加该内容<br></code></pre></td></tr></table></figure><h2 id="2-安装基础功能应用"><a href="#2-安装基础功能应用" class="headerlink" title="2.安装基础功能应用"></a>2.安装基础功能应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl disable iwd                                                  #确保iwd开机处于关闭状态，其无线连接会与NetworkManager冲突<br>systemctl stop iwd                                                     #同上，立即关闭iwd<br>systemctl enable --now NetworkManager                                  #确保先启动NetworkManager，并进行网络连接 若iwd已经与NetworkManager冲突 则执行完上一步重启一下电脑即可。<br><br>pacman -S ntfs-3g                                                      #识别NTFS格式的硬盘<br>pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei  wqy-microhei     #安装几个开源中文字体 一般装上文泉驿就能解决大多wine应用中文方块的问题<br>pacman -S noto-fonts-cjk noto-fonts-emoji noto-fonts-extra             #安装谷歌开源字体及表情<br>pacman -S firefox chromium                                             #安装常用的火狐、谷歌浏览器<br>pacman -S ark                                                          #与dolphin同用右键解压 注意可同时安装可选解压支持项<br>pacman -S packagekit-qt5 packagekit appstream-qt appstream             #确保Discover(软件中心）可用 需重启<br>pacman -S gwenview                                                     #图片查看器<br>pacman -S steam                                                        #稍后看完显卡驱动再使用 专有软件<br></code></pre></td></tr></table></figure><h2 id="3-开启32位支持库与Archlinuxcn支持库"><a href="#3-开启32位支持库与Archlinuxcn支持库" class="headerlink" title="3.开启32位支持库与Archlinuxcn支持库"></a>3.开启32位支持库与Archlinuxcn支持库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/pacman.conf<br><span class="hljs-comment">#去掉[multilib]一节中两行的注释，来开启 32 位库支持</span><br><span class="hljs-comment">#文档最后添加以下两行内容</span><br>[archlinuxcn]<br>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br><br>sudo pacman -S archlinuxcn-keyring                                          <span class="hljs-comment">#cn源中的签名(archlinuxcn-keyring在archLinuxCn)</span><br>sudo pacman -S yay                                                          <span class="hljs-comment">#yay命令可以让用户安装AUR中的软件(yay在archLinuxCn)</span><br></code></pre></td></tr></table></figure><p>安装 archlinuxcn-keyring 时报错问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Syu haveged<br>systemctl start haveged<br>systemctl enable haveged<br><br>rm -fr /etc/pacman.d/gnupg<br>pacman-key --init<br>pacman-key --populate archlinux<br>pacman-key --populate archlinuxcn<br></code></pre></td></tr></table></figure><p>更新系统</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman -Syyu</span><br></code></pre></td></tr></table></figure><h2 id="4-安装桌面"><a href="#4-安装桌面" class="headerlink" title="4.安装桌面"></a>4.安装桌面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -S plasma-meta konsole dolphin  #安装plasma-meta元软件包以及终端和文件管理器<br>systemctl enable sddm#开机登陆界面<br></code></pre></td></tr></table></figure><h2 id="5-安装显卡驱动"><a href="#5-安装显卡驱动" class="headerlink" title="5.安装显卡驱动"></a>5.安装显卡驱动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">根据需要选择其中一个或全部</span><br>pacman -S mesa lib32-mesa vulkan-intel lib32-vulkan-intel #英特尔核心显卡<br>pacman -S nvidia nvidia-settings lib32-nvidia-utils #必须安装 英伟达独立显卡<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">显卡切换</span><br>yay -S optimus-manager optimus-manager-qt #在核芯显卡和独立显卡间轻松切换<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">重启电脑，用个人账户登陆</span><br></code></pre></td></tr></table></figure><h2 id="6-安装输入法"><a href="#6-安装输入法" class="headerlink" title="6.安装输入法"></a>6.安装输入法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S fcitx5-im #基础包组<br>sudo pacman -S fcitx5-chinese-addons #官方中文输入引擎<br>sudo pacman -S fcitx5-material-color #主题<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">配置</span><br>sudo vim /etc/environment<br><br>GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>SDL_IM_MODULE=fcitx<br></code></pre></td></tr></table></figure><p>在<a href="https://archlinuxstudio.github.io/ArchLinuxTutorial/#/rookie/DE&amp;App?id=_3%e5%ae%89%e8%a3%85-kde-plasma-%e6%a1%8c%e9%9d%a2%e7%8e%af%e5%a2%83">https://archlinuxstudio.github.io/ArchLinuxTutorial/#/rookie/DE&amp;App?id=_3%e5%ae%89%e8%a3%85-kde-plasma-%e6%a1%8c%e9%9d%a2%e7%8e%af%e5%a2%83</a> 第9节中有详细说明如下：</p><p>打开 <em>系统设置</em> &gt; <em>区域设置</em> &gt; _输入法_，先点击<code>运行Fcitx</code>即可，拼音为默认添加项。如你还需要更多输入法如五笔，则再点击<code>添加输入法</code>，找到简体中文下的五笔 ，点击添加即可加入五笔输入法。</p><p>接下来点击 <em>拼音</em> 右侧的配置按钮，点选<code>云拼音</code>和<code>在程序中显示预编辑文本</code> 最后应用。</p><p>回到输入法设置，点击<code>配置附加组件</code>，找到 <em>经典用户界面</em> 在主题里选择一个你喜欢的颜色 最后应用。</p><p>注销，重新登陆，就可以发现已经可以在各个软件中输入中文了</p><h2 id="7-界面美化可根据此文章"><a href="#7-界面美化可根据此文章" class="headerlink" title="7.界面美化可根据此文章"></a>7.界面美化可根据此文章</h2><p><a href="https://archlinuxstudio.github.io/ArchLinuxTutorial/#/advanced/beauty">https://archlinuxstudio.github.io/ArchLinuxTutorial/#/advanced/beauty</a></p><h1 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h1><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S package_name     # 安装软件包<br>sudo pacman -Syu package_name   # 升级系统并安装软件包，Arch Linux 不支持部分升级，建议用此命令先升级再安装<br>sudo pacman -Syu                # 升级系统<br>sudo pacman -Syyu               # 升级系统 yy标记强制刷新 u标记升级动作<br>sudo pacman -R package_name     # 删除软件包<br>sudo pacman -Rs package_name    # 删除软件包，及其所有没有被其他已安装软件包使用的依赖包<br>sudo pacman -Qdt                # 找出孤立包 Q为查询本地软件包数据库 d标记依赖包 t标记不需要的包 dt合并标记孤立包<br>sudo pacman -Rs $(pacman -Qtdq) # 删除孤立软件包<br>sudo pacman -Fy                 # 更新命令查询文件列表数据库<br>sudo pacman -F xxx              # 当不知道某个命令属于哪个包时，用来查询某个xxx命令属于哪个包<br></code></pre></td></tr></table></figure><h2 id="图形管理"><a href="#图形管理" class="headerlink" title="图形管理"></a>图形管理</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">yay</span> -S octopi <span class="hljs-comment">#包管理器前端界面</span><br></code></pre></td></tr></table></figure><h1 id="安装应用及处理使用时的一些问题"><a href="#安装应用及处理使用时的一些问题" class="headerlink" title="安装应用及处理使用时的一些问题"></a>安装应用及处理使用时的一些问题</h1><h2 id="dev-sidecar"><a href="#dev-sidecar" class="headerlink" title="dev-sidecar"></a>dev-sidecar</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">github加速访问</span><br>https://github.com/docmirror/dev-sidecar<br><span class="hljs-meta">#</span><span class="bash">直接运行下载的.AppImage文件，或为此文件创建桌面应用程序</span><br></code></pre></td></tr></table></figure><h2 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S nutstore<br><span class="hljs-meta">#</span><span class="bash">解决没有界面问题</span><br><span class="hljs-meta">#</span><span class="bash">1 修改配置</span><br>vim /opt/nutstore/conf/nutstore.properties <br>webui.enable=true 改为 webui.enable=false<br><span class="hljs-meta">#</span><span class="bash">2 下载依赖</span><br>sudo pacman -S gvfs libappindicator-gtk3 python2-gobject<br></code></pre></td></tr></table></figure><h2 id="typora-picgo"><a href="#typora-picgo" class="headerlink" title="typora+picgo"></a>typora+picgo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S typora<br>yay -S picgo-appimage-beta<br></code></pre></td></tr></table></figure><h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S com.qq.weixin.spark<br><span class="hljs-meta">#</span><span class="bash">安装有问题时可查看 https://aur.archlinux.org/packages/com.qq.weixin.spark/</span><br><span class="hljs-meta">#</span><span class="bash">成功安装处理</span><br>git clone https://aur.archlinux.org/com.qq.weixin.spark.git<br>cmd com.qq.weixin.spark<br>vim PKGBUILD<br>sed -i &#x27;s/sucdn.jerrywang.top/store.deepinos.org.cn/s&#x27; PKGBUILD<br>makepkg<br>sudo pacman -U *.pkg.tar.zst<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">输入框不显示汉字，而是方框时，安装微软雅黑字体</span><br>sudo pacman -S wqy-microhei #方法1<br>WINEPREFIX=~/.deepinwine/Spark-WeChat deepin-wine5 winecfg #方法2：在‘桌面整合’-‘物件’-‘消息框字体’调整为中文字体<br></code></pre></td></tr></table></figure><h2 id="企业微信"><a href="#企业微信" class="headerlink" title="企业微信"></a>企业微信</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S com.qq.weixin.work.deepin<br></code></pre></td></tr></table></figure><h2 id="腾讯会议"><a href="#腾讯会议" class="headerlink" title="腾讯会议"></a>腾讯会议</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S wemeet<br></code></pre></td></tr></table></figure><h2 id="火焰截图"><a href="#火焰截图" class="headerlink" title="火焰截图"></a>火焰截图</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S flameshot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
